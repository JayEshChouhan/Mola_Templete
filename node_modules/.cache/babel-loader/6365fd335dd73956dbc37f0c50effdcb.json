{"ast":null,"code":"const axios = require(\"axios\").default;\n\nconst baseUrl = 'http://127.0.0.1:8000/';\n\nfunction Response(status, data, status_code) {\n  /* respose function to return same resposse objet each time api make a call  */\n  return {\n    status: status,\n    data: data,\n    statusCode: status_code\n  };\n}\n\n_c = Response;\nexport function SetAccessToken(token) {\n  localStorage.setItem(\"AccessToken\", token);\n}\n_c2 = SetAccessToken;\nexport function GetAccessToken() {\n  return localStorage.getItem(\"AccessToken\");\n}\n_c3 = GetAccessToken;\nexport function SetRefreshToken(token) {\n  localStorage.setItem(\"RefreshToken\", token);\n}\n_c4 = SetRefreshToken;\nexport function GetRefreshToken() {\n  return localStorage.getItem(\"RefreshToken\");\n}\n_c5 = GetRefreshToken;\nexport async function LogOutAction() {\n  localStorage.removeItem(\"AccessToken\");\n  localStorage.removeItem(\"RefreshToken\");\n  localStorage.removeItem(\"UserData\");\n}\n_c6 = LogOutAction;\nexport async function runApiBase(method, url, data, auth) {\n  /* Funtion used to run get request with data \n  Usage :- Take argument as url and concate it with base url \n           check if token available in data then run it token\n            and add it to headers \n  */\n  var responseStatus = \"\";\n  var ResponseData = \"\";\n  var statusCode = \"\";\n  var obj = \"\";\n  var header = {};\n\n  if (data.token) {\n    /* Checking if token is avaiable in data or not */\n    header = {\n      Authorization: \"Bearer \" + data.token\n    }; // deleting token object from object\n\n    delete data.token;\n  }\n  /* Configuarations for runnning API */\n\n\n  var config = {\n    method: method,\n    url: baseUrl + url,\n    headers: header,\n    data: data\n  };\n  /* Make Api request */\n\n  const response = await axios(config).then(response => {\n    /* Runs on Success */\n    responseStatus = true;\n    obj = response;\n  }).catch(error => {\n    /* runs on error */\n    responseStatus = false;\n    obj = error.response;\n  });\n  var ResponseData = obj.data;\n  statusCode = obj.request.status;\n  return Response(responseStatus, ResponseData, statusCode);\n}\n\nasync function UpdateAccessToken() {\n  /* Update the  accessd token from refresh token */\n  var token = GetRefreshToken();\n  const GetToken = await runApiBase(\"get\", \"api/token/refresh/\", {\n    refresh: token\n  });\n\n  if (GetToken.statusCode === 401) {\n    LogOutAction();\n    return GetToken;\n  } else {\n    // SetAccessToken(GetToken.data.access);\n    return GetToken.data.access;\n  }\n}\n\n_c7 = UpdateAccessToken;\n\nasync function checkAndUpdateAccessToken() {\n  /* Retrive the access token and check if access token is valid or not and \n  if access token is exppired then it will use refresh token to update the access token \n  and if the refresh token is already expired then it prefrom logout \n  */\n  var token = GetAccessToken();\n  const CheckToken = await runApiBase(\"get\", \"api/token/verify/\", {\n    token: token\n  });\n\n  if (CheckToken.statusCode !== 401) {\n    const UpdateToken = await UpdateAccessToken();\n    return UpdateToken;\n  }\n}\n\nexport async function runApi(method, url, data) {\n  let auth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  /* A base for calling all api  \n  Usage :- Take  Method argument example get post put patch delete\n            url is the api url that need to be called \n            data is Request data that will passed to api \n            suppose if you not want to use authetication the auth should be false \n            for example a product is visiable to all so no need auth\n            but a profile need auth \n  */\n  if (auth) {\n    const check = await checkAndUpdateAccessToken();\n    data[\"token\"] = GetAccessToken();\n  }\n\n  const Result = await runApiBase(method, url, data, auth);\n  return Result;\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Response\");\n$RefreshReg$(_c2, \"SetAccessToken\");\n$RefreshReg$(_c3, \"GetAccessToken\");\n$RefreshReg$(_c4, \"SetRefreshToken\");\n$RefreshReg$(_c5, \"GetRefreshToken\");\n$RefreshReg$(_c6, \"LogOutAction\");\n$RefreshReg$(_c7, \"UpdateAccessToken\");","map":{"version":3,"sources":["/home/my/jayesh/test-app2/test-app2/src/api/base.js"],"names":["axios","require","default","baseUrl","Response","status","data","status_code","statusCode","SetAccessToken","token","localStorage","setItem","GetAccessToken","getItem","SetRefreshToken","GetRefreshToken","LogOutAction","removeItem","runApiBase","method","url","auth","responseStatus","ResponseData","obj","header","Authorization","config","headers","response","then","catch","error","request","UpdateAccessToken","GetToken","refresh","access","checkAndUpdateAccessToken","CheckToken","UpdateToken","runApi","check","Result"],"mappings":"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","sourcesContent":["const axios = require(\"axios\").default;\nconst baseUrl = 'http://127.0.0.1:8000/';\n\nfunction Response(status, data, status_code) {\n  /* respose function to return same resposse objet each time api make a call  */\n\n  return {\n    status: status,\n    data: data,\n    statusCode: status_code,\n  };\n}\n\nexport function SetAccessToken(token) {\n  localStorage.setItem(\"AccessToken\", token);\n}\n\nexport function GetAccessToken() {\n  return localStorage.getItem(\"AccessToken\");\n}\n\nexport function SetRefreshToken(token) {\n  localStorage.setItem(\"RefreshToken\", token);\n}\nexport function GetRefreshToken() {\n  return localStorage.getItem(\"RefreshToken\");\n}\n\nexport async function LogOutAction() {\n  localStorage.removeItem(\"AccessToken\");\n  localStorage.removeItem(\"RefreshToken\");\n  localStorage.removeItem(\"UserData\");\n}\n\nexport async function runApiBase(method, url, data, auth) {\n  /* Funtion used to run get request with data \n  Usage :- Take argument as url and concate it with base url \n           check if token available in data then run it token\n            and add it to headers \n  */\n  var responseStatus = \"\";\n  var ResponseData = \"\";\n  var statusCode = \"\";\n  var obj = \"\";\n  var header = {};\n\n  if (data.token) {\n    /* Checking if token is avaiable in data or not */\n    header = { Authorization: \"Bearer \" + data.token };\n\n    // deleting token object from object\n    delete data.token;\n  }\n\n  /* Configuarations for runnning API */\n  var config = {\n    method: method,\n    url: baseUrl + url,\n    headers: header,\n    data: data,\n  };\n\n  /* Make Api request */\n  const response = await axios(config)\n    .then((response) => {\n      /* Runs on Success */\n      responseStatus = true;\n      obj = response;\n    })\n    .catch((error) => {\n      /* runs on error */\n      responseStatus = false;\n      obj = error.response;\n    });\n\n  var ResponseData = obj.data;\n  statusCode = obj.request.status;\n  return Response(responseStatus, ResponseData, statusCode);\n}\n\nasync function UpdateAccessToken() {\n  /* Update the  accessd token from refresh token */\n  var token = GetRefreshToken();\n  const GetToken = await runApiBase(\"get\", \"api/token/refresh/\", {\n    refresh: token,\n  });\n  if (GetToken.statusCode === 401) {\n    LogOutAction();\n    return GetToken;\n  } else {\n    // SetAccessToken(GetToken.data.access);\n    return GetToken.data.access;\n  }\n}\n\nasync function checkAndUpdateAccessToken() {\n  /* Retrive the access token and check if access token is valid or not and \n  if access token is exppired then it will use refresh token to update the access token \n  and if the refresh token is already expired then it prefrom logout \n  */\n  var token = GetAccessToken();\n  const CheckToken = await runApiBase(\"get\", \"api/token/verify/\", {\n    token: token,\n  });\n  if (CheckToken.statusCode !== 401) {\n    const UpdateToken = await UpdateAccessToken();\n    return UpdateToken;\n  }\n}\n\nexport async function runApi(method, url, data, auth = false) {\n  /* A base for calling all api  \n  Usage :- Take  Method argument example get post put patch delete\n            url is the api url that need to be called \n            data is Request data that will passed to api \n            suppose if you not want to use authetication the auth should be false \n            for example a product is visiable to all so no need auth\n            but a profile need auth \n  */\n  if (auth) {\n    const check = await checkAndUpdateAccessToken();\n    data[\"token\"] = GetAccessToken();\n  }\n  const Result = await runApiBase(method, url, data, auth);\n  return Result;\n}"]},"metadata":{},"sourceType":"module"}